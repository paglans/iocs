#! /bin/bash
# Author: <Ralph.Lange@bessy.de>
#
# History:
# 2006-03-12: Adapted from D. HerrendÃ¶rfer's ca-gateway script
#          2006-04-04: Bugfix in config file parser
#          2008-05-20: Adapted to procServ

# Do NOT "set -e"

# !! This script is located on a mounted file system
# !! It must be run after the mountnfs.sh script

PATH=/sbin:/usr/sbin:/bin:/usr/bin 
DESC="EPICS soft IOCs" 
SCRIPTNAME=/etc/init.d/softIOC 
HOST=`uname -n`


PROCSERV=/usr/bin/procServ
CONFFILE=/opt/epics/config//softiocs.$HOST
HOMEDIRS=/home


# Check for config file
if [ ! -r $CONFFILE ] 
then
    echo "Error: Can't find configuration file $CONFFILE!" 
    exit 1
fi

#
# Functions that read in the configuration file 
#

clear_options()
{
    for option in "CA_AUTO" "CA_ADDR" "CA_PORT" "IOC_USER" "PORT" 
    do
        unset $option;
    done
}

evaluate_options()
{
    while [ $# != 0 ] 
    do
        TAG=`echo $1 | tr [:lower:] [:upper:]`
        case "$TAG" in
        "#") ;;
        "CA_AUTO" | "CA_ADDR" | "CA_PORT" | "COREDUMPSIZE" | \
        "HOMEDIR" | "BOOTDIR" | "IOC_USER" | "PORT" )
                                # Test the presence of values for the current option
            OPTION=$TAG
            shift
            if [ -z $TAG -o $TAG = "#" ] 
            then
                echo "$CONFFILE: Value(s) required for $TAG.";
                exit 1 
            else
                VALUE = $1
                shift
            fi
                                # If more values follow assign them too
            while [ $1 != '#' -a $# != 0 ] 
            do
                VALUE = "$VALUE $1"
                shift;
            done
            eval ${OPTION}=\$VALUE
            ;;
        *)  echo "$CONFFILE: Unknown option $1."
            exit 1
        esac
        shift
    done
}

default_options()
{
    # Set IOC defaults for options
    # (may be overridden in config file) 
    IOC_LC=$1
    IOC_UC=`echo $1 | tr [:lower:] [:upper:]`

    if [[ "$IOC_LC" = "mdi"* ]] 
#    if [ "$IOC_LC" = "mdi"* ]
        then
        TOP=DiagR3.14.9.0.1-Tornado2.2.1 
    elif [[ "$IOC_LC" = *"p" ]]
        then
        TOP=MLS-Controls 
    else
        TOP=BII-Controls/base-3-14
    fi

    BOOTDIR=/opt/IOC/$TOP/boot/$IOC_UC
    HOMEDIR=$HOMEDIRS/$IOC_LC
    PIDFILE=$HOMEDIR/$IOC_LC.pid
    ENVFILE=$HOMEDIR/$IOC_LC.env
    IOC_USER=$IOC_LC
}

assign_options()
{
    # Find $TAG section
    # Remove comments
    # Remove leading and trailing whitespace
    # Remove $TAG: tag
    # Join lines ending with a "\"
    # Mark end of option with a "#"
    # Remove unnecessary whitespace
    TAG=$1
    SECTION=`sed -n "/^$TAG:/I,/^[\t ]*$/p" $CONFFILE | \
            sed -n '/^[^#]/p' | \
            sed -e 's/^[ \t]*//' -e 's/[ \t]*$//' \
                -e "s/$TAG://I" \
                -e :a -e '/\\\\$/N; s/\\\\\\n//; ta' \
                -e 's/$/ \#/' \
                -e 's/[\t ]/ /g'`
    evaluate_options $SECTION
}

get_iocs() 
{
    # Get IOCs from command line or AUTO: entry in configuration file 
    # Test for matching section in configuration file
    if [ $# = 0 ]
    then
        TEST_LIST=`grep -i '^AUTO:' "$CONFFILE" | cut -d: -f2- | tr [:upper:] [:lower:]`
    else
        TEST_LIST="$@"
    fi

    CHECKED_LIST=""
    for IOC in $TEST_LIST 
    do
        grep -qi "^$IOC:" $CONFFILE 
        if [ $? = 0 ]
        then
            CHECKED_LIST="$CHECKED_LIST $IOC"
        fi 
    done
    echo $CHECKED_LIST
}

set_cmdenvopts()
{
    # Set up the environment setup string
    SETENV="LINES=60 "`test ! -z "$CA_AUTO" && echo "export EPICS_CA_AUTO_ADDR_LIST=\"$CA_AUTO\";"`
    SETENV="$SETENV "`test ! -z "$CA_ADDR" && echo "export EPICS_CA_ADDR_LIST=\"$CA_ ADDR\";"`
    SETENV="$SETENV "`test ! -z "$CA_PORT" && echo "export EPICS_CA_SERVER_PORT=\" $CA_PORT\";"`
    SETENV="$SETENV "`test ! -z "$BOOTDIR" && echo "export BOOTDIR=\"$BOOTDIR\";"` 

    # Set up the options for the procserv program

    PROCSERVOPTS=`test ! -z "$IOC_USER" && echo "-n \"$IOC_USER\""`
    PROCSERVOPTS="$PROCSERVOPTS "`test ! -z "$COREDUMPSIZE" && echo "--coresize \"$COREDUMPSIZE\""`
    PROCSERVOPTS="$PROCSERVOPTS -q -c $BOOTDIR -p $PIDFILE -i ^D^C^] $PORT"
}

#
# Function that starts the daemon/service 
#
do_start()
{
    # Return
    # 0if
    # 1if
    # 2if
    # Add code here, if necessary, that waits for the process to be ready 
    # to handle requests from services started subsequently which depend 
    # on this one. As a last resort, sleep for some time.

    echo -n "Starting soft IOCs ... " 
    MYIOCS=`get_iocs $@`
    [ "$MYIOCS" = "" ] && echo -n "<none> " 
    for IOC in $MYIOCS
    do
        echo -n "$IOC "
        clear_options
        default_options "$IOC"
        assign_options "GLOBAL"
        assign_options "$IOC"
        set_cmdenvopts

        if [ -d $BOOTDIR ] 
        then
            if [ -d $HOMEDIR ] 
            then
                sudo -H -u $IOC sh -c "$SETENV (env > $ENVFILE; /sbin/start-stop-daemon --start --quiet --chdir $BOOTDIR \
                --pidfile $PIDFILE --startas $PROCSERV --name procServ --test > /dev/null)"
                if [ "$?" =1 ]
                then
                    echo -n "<was running> "
                else
                    sudo -H -u $IOC sh -c "$SETENV (env > $ENVFILE; /sbin/start-stop-daemon --start --quiet --chdir $BOOTDIR \
                    --pidfile $PIDFILE --startas $PROCSERV --name procServ --$PROCSERVOPTS ./st.cmd)"

                    if [ "$?" = 1 ]
                    then 
                        echo -n "<failed> "
                    fi
                fi
            else
                echo -e "\nWarning: Home directory $BOOTDIR does not exist! Ignoring $IOC"
            fi
        else
            echo -e "\nWarning: Home directory $BOOTDIR does not exist! Ignoring $IOC"
        fi
    done
    echo "... done."
}

#
# Function that stops the daemon/service \
#
do_stop()
{
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred

    echo -n "Stopping soft IOCs ... " 
    MYIOCS=`get_iocs $@`
    [ "$MYIOCS" = "" ] && echo -n "<none> " 
    for IOC in $MYIOCS
    do
        echo -n "$IOC "
        clear_options
        default_options "$IOC"
        assign_options "GLOBAL"
        assign_options "$IOC"
        set_cmdenvopts
        sudo -H -u $IOC sh -c "/sbin/start-stop-daemon --stop --quiet --pidfile $PIDFILE --name procServ --test > /dev/null"
        if [ $? = 1 ] 
            then
            echo -n "<not running> "
        else
            sudo -H -u $IOC sh -c "/sbin/start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name procServ" 
            if [ $? = 1 ]
                then
                echo -n "<failed> " 
            else
                sudo -H -u $IOC sh -c "rm -f $PIDFILE" 
            fi
        fi 
    done
    echo "... done."
}

#
# Function that sends a SIGHUP to the daemon/service 
#
do_reload()
{
    #
    # If the daemon can reload its configuration without
    # restarting (for example, when it is sent a SIGHUP),
    # then implement that here.
    #
#    start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
#    return 0

    echo "Restarting soft IOCs ... " 
    STARTDIR=$PWD
    IOCS=`get_iocs $@`
    [ "$IOCS" = "" ] && echo -n "<none> " 
    for IOC in $IOCS
    do
        echo -n "$IOC " 
        clear_options 
        default_options "$IOC" 
        assign_options "GLOBAL" 
        assign_options "$IOC" 
        if [ -d $BOOTDIR ]
        then
            cd "$BOOTDIR"
# restart it!
            echo -e "\ndebug: Reloading ioc $IOC"
            cd "$STARTDIR"
        else
            echo -e "\nWarning: Boot directory $BOOTDIR does not exist! Entry for $NET ignored!"
        fi
    done
    echo "... done."
}


COMMAND=$1
shift
IOCS=`echo $@ | tr [:upper:] [:lower:]`

case "$COMMAND" in 
    start)
        do_start $IOCS
        ;; 
    stop)
        do_stop $IOCS
        ;;
    #reload|force-reload)
        #
        # If do_reload() is not implemented then leave this commented out 
        # and leave 'force-reload' as an alias for 'restart'.
        #
        #log_daemon_msg "Reloading $DESC" "$NAME"
        #do_reload
        #log_end_msg $?
        #;;
    restart|force-reload) 
    #
    # If the "reload" option is implemented then remove the 
    # 'force-reload' alias
    #
        do_stop $IOCS
    	sleep 1
    	do_start $IOCS
    	;;
    *)
    	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
    	echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload} [iocs ...]" >&2
    	exit 3
    	;;
esac
